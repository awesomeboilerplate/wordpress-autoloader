@mixin respond-to($media...) {
    @each $mediatype in $media {
        @include breakpoints($mediatype) {@content}
    }
}

@mixin breakpoints($media) {
    @if $media == phone {
        @media (max-width: map-get($media-queries, 'phone')-1+'px') { @content; }
    } @else if $media == xs {
        @media (max-width: map-get($media-queries, 'sm')-1+'px') { @content }
    } @else if $media == sm {
        @media (min-width: map-get($media-queries, 'sm')+'px') and (max-width: map-get($media-queries, 'md')-1+'px') { @content }
    } @else if $media == md {
        @media (min-width: map-get($media-queries, 'md')+'px') and (max-width: map-get($media-queries, 'lg')-1+'px') { @content }
    } @else if $media == lg {
        @media (min-width: map-get($media-queries, 'lg')+'px') { @content }
    } @else if $media == xs-and-up {
        @media (min-width: map-get($media-queries, 'phone')+'px') { @content }
    } @else if $media == sm-and-up {
        @media (min-width: map-get($media-queries, 'sm')+'px') { @content }
    } @else if $media == md-and-up {
        @media (min-width: map-get($media-queries, 'md')+'px') { @content }
    } @else if $media == non-retina {
        @media screen and (-webkit-max-device-pixel-ratio: 1) { @content; }
    } @else if $media == retina {
        @media screen and (-webkit-min-device-pixel-ratio: 2) { @content; }
    } @else {
        @media only screen and (max-width: #{$media}px) { @content; }
    }
}

@mixin svg-bg($name, $color: '') {
    @if map-has-key($svg, $name) {
        $icon: map-get($svg, $name);
        background-image: svg-url(str-replace($icon, '{$color}', $color));
    } @else {
        @warn "Svg doesn't exists: #{$name}";
    }
}

@function svg-url($svg) {
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg) / $slice);
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        $chunk: str-replace($chunk, '"', "\'");
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');
        $chunk: str-replace($chunk, '&', '%26');
        $chunk: str-replace($chunk, '#', '%23');
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }
    @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}

@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    @return $string;
}

@mixin z($key) {
    z-index: map-get($z-indexes, $key);
}

@mixin font-weight($key) {
    font-weight: map-get($font-weights, $key);
}

@mixin vertical-center() {
    top: 50%;
    transform: translateY(-50%);
}
